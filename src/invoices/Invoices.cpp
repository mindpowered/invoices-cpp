// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_7f9204b932c8d809
#define INCLUDED_7f9204b932c8d809
#include "maglev/MagLevFunction.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_invoices_Invoices
#include <invoices/Invoices.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0876bbd438550944_11_new,"invoices.Invoices","new",0xa7c36580,"invoices.Invoices.new","invoices/Invoices.hx",11,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_19_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",19,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_30_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",30,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_41_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",41,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_52_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",52,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_63_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",63,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_74_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",74,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_85_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",85,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_96_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",96,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_107_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",107,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_118_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",118,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_129_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",129,0x7191378f)
HX_LOCAL_STACK_FRAME(_hx_pos_0876bbd438550944_16_registerMyMethods,"invoices.Invoices","registerMyMethods",0xf828fea3,"invoices.Invoices.registerMyMethods","invoices/Invoices.hx",16,0x7191378f)
namespace invoices{

void Invoices_obj::__construct( ::maglev::MagLev maglev){
            	HX_STACKFRAME(&_hx_pos_0876bbd438550944_11_new)
HXLINE(  12)		this->maglev = maglev;
HXLINE(  13)		this->registerMyMethods();
            	}

Dynamic Invoices_obj::__CreateEmpty() { return new Invoices_obj; }

void *Invoices_obj::_hx_vtable = 0;

Dynamic Invoices_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Invoices_obj > _hx_result = new Invoices_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Invoices_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e40d56c;
}

void Invoices_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_19_registerMyMethods)
HXLINE(  20)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  21)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  22)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.CreateInvoice",c9,c5,37,57)));
HXLINE(  23)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  24)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  25)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.CreateInvoice' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",6e,90,c3,5a),data);
HXLINE(  26)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  27)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_30_registerMyMethods)
HXLINE(  31)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  32)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  33)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.DeleteInvoice",7a,80,7e,cd)));
HXLINE(  34)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  35)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  36)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.DeleteInvoice' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",9f,3c,8f,2c),data);
HXLINE(  37)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  38)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_41_registerMyMethods)
HXLINE(  42)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  43)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  44)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.ChangeInvoice",d5,91,c9,cf)));
HXLINE(  45)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  46)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  47)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.ChangeInvoice' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",7a,4e,a8,9e),data);
HXLINE(  48)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  49)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_52_registerMyMethods)
HXLINE(  53)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  54)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  55)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.GetInvoiceSummary",e7,73,63,8d)));
HXLINE(  56)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  57)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  58)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.GetInvoiceSummary' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",8c,76,8b,eb),data);
HXLINE(  59)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  60)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_63_registerMyMethods)
HXLINE(  64)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  65)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  66)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.GetLineItems",3e,89,45,d8)));
HXLINE(  67)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  68)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  69)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.GetLineItems' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",97,4c,a9,a0),data);
HXLINE(  70)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  71)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_74_registerMyMethods)
HXLINE(  75)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  76)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  77)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.AddLineItem",20,4e,e1,7c)));
HXLINE(  78)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  79)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  80)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.AddLineItem' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",c5,15,35,d7),data);
HXLINE(  81)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  82)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_85_registerMyMethods)
HXLINE(  86)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  87)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  88)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.ChangeLineItem",ff,6f,4b,d2)));
HXLINE(  89)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE(  90)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  91)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.ChangeLineItem' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",58,af,33,37),data);
HXLINE(  92)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  93)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_96_registerMyMethods)
HXLINE(  97)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  98)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  99)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.RemoveLineItem",d3,6e,66,43)));
HXLINE( 100)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE( 101)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE( 102)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.RemoveLineItem' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",2c,0c,f7,a4),data);
HXLINE( 103)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE( 104)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_107_registerMyMethods)
HXLINE( 108)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE( 109)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE( 110)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.GetInvoicesByClient",36,f2,a0,b4)));
HXLINE( 111)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE( 112)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE( 113)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.GetInvoicesByClient' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",db,80,fb,6c),data);
HXLINE( 114)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE( 115)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_118_registerMyMethods)
HXLINE( 119)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE( 120)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE( 121)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.GetAllInvoices",b9,5c,34,fa)));
HXLINE( 122)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE( 123)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE( 124)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.GetAllInvoices' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",12,43,8d,77),data);
HXLINE( 125)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE( 126)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_0876bbd438550944_129_registerMyMethods)
HXLINE( 130)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE( 131)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE( 132)			data->push(::maglev::MagLevString_obj::fromString(HX_("Invoices.FindInvoiceByNumber",4c,e4,10,51)));
HXLINE( 133)			data->push(::maglev::MagLevString_obj::fromString(HX_("invoices",26,ac,33,b1)));
HXLINE( 134)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE( 135)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'Invoices.FindInvoiceByNumber' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",f1,83,dd,e4),data);
HXLINE( 136)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE( 137)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_0876bbd438550944_16_registerMyMethods)
HXLINE(  17)		 ::maglev::MagLev bus = this->maglev;
HXLINE(  19)		 ::maglev::MagLev _hx_tmp = this->maglev;
HXDLIN(  19)		_hx_tmp->_hx_register(HX_("Invoices.CreateInvoice",c9,c5,37,57),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_0(bus))));
HXLINE(  30)		 ::maglev::MagLev _hx_tmp1 = this->maglev;
HXDLIN(  30)		_hx_tmp1->_hx_register(HX_("Invoices.DeleteInvoice",7a,80,7e,cd),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(bus))));
HXLINE(  41)		 ::maglev::MagLev _hx_tmp2 = this->maglev;
HXDLIN(  41)		_hx_tmp2->_hx_register(HX_("Invoices.ChangeInvoice",d5,91,c9,cf),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_2(bus))));
HXLINE(  52)		 ::maglev::MagLev _hx_tmp3 = this->maglev;
HXDLIN(  52)		_hx_tmp3->_hx_register(HX_("Invoices.GetInvoiceSummary",e7,73,63,8d),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_3(bus))));
HXLINE(  63)		 ::maglev::MagLev _hx_tmp4 = this->maglev;
HXDLIN(  63)		_hx_tmp4->_hx_register(HX_("Invoices.GetLineItems",3e,89,45,d8),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_4(bus))));
HXLINE(  74)		 ::maglev::MagLev _hx_tmp5 = this->maglev;
HXDLIN(  74)		_hx_tmp5->_hx_register(HX_("Invoices.AddLineItem",20,4e,e1,7c),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_5(bus))));
HXLINE(  85)		 ::maglev::MagLev _hx_tmp6 = this->maglev;
HXDLIN(  85)		_hx_tmp6->_hx_register(HX_("Invoices.ChangeLineItem",ff,6f,4b,d2),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_6(bus))));
HXLINE(  96)		 ::maglev::MagLev _hx_tmp7 = this->maglev;
HXDLIN(  96)		_hx_tmp7->_hx_register(HX_("Invoices.RemoveLineItem",d3,6e,66,43),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_7(bus))));
HXLINE( 107)		 ::maglev::MagLev _hx_tmp8 = this->maglev;
HXDLIN( 107)		_hx_tmp8->_hx_register(HX_("Invoices.GetInvoicesByClient",36,f2,a0,b4),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_8(bus))));
HXLINE( 118)		 ::maglev::MagLev _hx_tmp9 = this->maglev;
HXDLIN( 118)		_hx_tmp9->_hx_register(HX_("Invoices.GetAllInvoices",b9,5c,34,fa),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_9(bus))));
HXLINE( 129)		 ::maglev::MagLev _hx_tmp10 = this->maglev;
HXDLIN( 129)		_hx_tmp10->_hx_register(HX_("Invoices.FindInvoiceByNumber",4c,e4,10,51),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_10(bus))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Invoices_obj,registerMyMethods,(void))


::hx::ObjectPtr< Invoices_obj > Invoices_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< Invoices_obj > __this = new Invoices_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< Invoices_obj > Invoices_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	Invoices_obj *__this = (Invoices_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Invoices_obj), true, "invoices.Invoices"));
	*(void **)__this = Invoices_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

Invoices_obj::Invoices_obj()
{
}

void Invoices_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Invoices);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_END_CLASS();
}

void Invoices_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
}

::hx::Val Invoices_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Invoices_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Invoices_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Invoices_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(Invoices_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Invoices_obj_sStaticStorageInfo = 0;
#endif

static ::String Invoices_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("registerMyMethods",83,b1,0a,b9),
	::String(null()) };

::hx::Class Invoices_obj::__mClass;

void Invoices_obj::__register()
{
	Invoices_obj _hx_dummy;
	Invoices_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("invoices.Invoices",8e,e5,4a,16);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Invoices_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Invoices_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Invoices_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Invoices_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace invoices
